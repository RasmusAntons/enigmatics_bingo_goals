<html>
<head>
<style>
:root {
    --color-very-easy: #bae1ff;
    --color-easy: #5de57b;
    --color-medium: #fefe89;
    --color-hard: #f5bb77;
    --color-very-hard: #f83159;

    --color-tag-dimension: #0ff;
    --color-tag-special: #f83159;
}

.very_easy { --background-color: var(--color-very-easy); }
.easy { --background-color: var(--color-easy); }
.medium { --background-color: var(--color-medium); }
.hard { --background-color: var(--color-hard); }
.very_hard { --background-color: var(--color-very-hard); }

.dimension_tag { color: var(--color-tag-dimension); }
.special_tag { color: var(--color-tag-special); }


*, *::before, *::after {
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;
    font-size: 1rem;
    font-family: system-ui;
    color: white;
}

html, body {
    height: 100%;
	background-color: #373239;
}

main {
    height: 100%;
    display: flex;
    flex-direction: column;
}

table {
    width: 100%;
    border-collapse: collapse;
}

tr:has(.todo) td:first-child span:first-of-type {
	color: #bbb;
	text-decoration: line-through;
}

tr:not(tr:first-of-type) {
	counter-increment: row;
    border-bottom: 1px dashed #6666;
}

tr.even {
    background-color: #373239;
}

tr.odd {
    background-color: #3c373d;
}

th, td {
    padding: 0.5rem;
}

th {
    position: sticky;
    top: 0px;

    background-color: black;

    color: white;
    text-transform: uppercase;
    text-align: left;
}

td {
    line-height: 1.5rem;
}

td:first-of-type::before {
	content: counter(row)".";
	color: gray;
}

.tag {
    padding-inline: 0.25rem;

    background-color: #000b;
    border: 1px solid black;
    border-radius: 5px;

    font-family: monospace;
    user-select: none;
}

.todo {
	background-color: #841027;
	border-color: crimson;
	text-transform: uppercase;
	font-weight: bold;
}

.tag:hover, .selected {
    border: 1px solid #fff;
    cursor: pointer;
}

.pill {
    padding: 0.1rem 0.3rem;

    background-color: var(--background-color);
    border-radius: 1rem;

    color: color-mix(in srgb, var(--background-color), black 70%);
    font-weight: bold;
    font-size: 0.6rem;
    text-transform: uppercase;
    user-select: none;
}

#other-goals {
    position: sticky;
    bottom: 0px;
    max-height: 5rem;
    margin-top: auto;
    padding: 0.5rem;
    flex-shrink: 0;

    display: flex;
    flex-wrap: wrap;
    gap: 1rem;

    background-color: black;
    overflow-y: scroll;
}

#other-goals a {
    text-transform: uppercase;
    font-weight: bold;
    text-decoration: none;
}

#other-goals a:hover {
    text-decoration: underline;
}
</style>
</head>
<body>
<main>
    <table>
    	<tr><th>Goal</th><th>Tags</th><th>Synergies</th></tr>
    	{% for goal in goals %}
    	<tr>
    		<td>
    		    <span>{{ goal._name }}</span>
    		    <span class="pill {{ goal._diff }}">{{ goal._diff_title }}</span>
			    {% if goal.infrequency %}
				    <span class="pill infrequency">1/{{ goal.infrequency + 1 }}</span>
			    {% endif %}
    		</td>
    		<td>
    		{% for tag in goal.tags %}
    			<span class="{% if tag in dimension_tags %}dimension_tag {% elif tag in special_tags %}special_tag {% elif tag == 'todo' %}todo {% endif %}tag">{{ tag }}</span>
    		{% endfor %}
    		</td>
	        <td>
		    {% for antisynergy in goal.antisynergies %}
			    <span class="antisynergy">{{ antisynergy }}</span>
			{% endfor %}
	        </td>
    	</tr>
    	{% endfor %}
    </table>
    <div id="other-goals">
    	<a href="goal_list.html">enigmatics_bingo_goals</a>
    	<a href="original_goal_list.html">original bingo mod</a>
    </div>
</main>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const tags = document.querySelectorAll('.tag');
    const rows = document.querySelectorAll('table tr:not(:first-child)');
    const selectedTags = new Set();

    tags.forEach(tag => {
        tag.addEventListener('click', function() {
            const tagText = this.textContent.trim();

            if (selectedTags.has(tagText)) {
                selectedTags.delete(tagText);
            } else {
                selectedTags.add(tagText);
            }

            tags.forEach(t => {
                if (selectedTags.has(t.textContent.trim())) {
                    t.classList.add('selected');
                } else {
                    t.classList.remove('selected');
                }
            });

            filterRows();
            console.log(Array.from(selectedTags));
        });
    });

    function filterRows() {
        let visibleRowIndex = 0;

        rows.forEach(row => {
            const rowTags = Array.from(row.querySelectorAll('.tag')).map(tag => tag.textContent.trim());
            const isVisible = Array.from(selectedTags).every(tag => rowTags.includes(tag));

            if (isVisible || selectedTags.size === 0) {
                row.style.display = '';
                row.classList.remove('even', 'odd');
                row.classList.add(visibleRowIndex % 2 === 0 ? 'even' : 'odd');
                visibleRowIndex++;
            } else {
                row.style.display = 'none';
            }
        });
    }

    filterRows();
});
</script>
</body>
</html>
